# We set the language to python, so that we can more easily specify our
# build matrix.  We simply apt install the compiled dependencies.
language: python

matrix:
  include:
    # GCC 4.8
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          packages:
            - build-essential
            - gcc
            - g++
            - gfortran
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc) && export CXX=$(which g++) && export FC=$(which gfortran)"
    # GCC 4.9
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-4.9
            - g++-4.9
            - gfortran-4.9
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc-4.9) && export CXX=$(which g++-4.9) && export FC=$(which gfortran-4.9)"
    # GCC 5
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-5
            - g++-5
            - gfortran-5
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc-5) && export CXX=$(which g++-5) && export FC=$(which gfortran-5)"
    # GCC 6
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-6
            - g++-6
            - gfortran-6
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc-6) && export CXX=$(which g++-6) && export FC=$(which gfortran-6)"
    # GCC 7
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-7
            - g++-7
            - gfortran-7
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc-7) && export CXX=$(which g++-7) && export FC=$(which gfortran-7)"

# The versions to test
python:
    - 3.6

# Set up MPI and mpi4py

before_install:
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a
    - conda install -c conda-forge numpy scipy matplotlib healpy pyephem pip
    - pip install mpi4py
    # set the C, C++, and Fortran compilers
    - eval "${MATRIX_EVAL}"
    # set the MPICH underlying compilers
    - export MPICH_CC=${CC}
    - export MPICH_CXX=${CXX}
    - export MPICH_FC=${FC}
    # Information about compilers
    - echo "CC = ${CC} $(${CC} -dumpversion)"
    - echo "CXX = ${CXX} $(${CXX} -dumpversion)"
    - echo "CC = ${FC} $(${FC} -dumpversion)"
    - if [ ! -z "$(which mpicc)" ]; then mpicc -v ; else echo "No mpicc" ; fi
    - if [ ! -z "$(which mpic++)" ]; then mpic++ -v ; else echo "No mpic++" ; fi
    - if [ ! -z "$(which mpicxx)" ]; then mpicxx -v ; else echo "No mpicxx" ; fi

# Skip this

install:
    - ./autogen.sh
    - export CFLAGS="-O3 -g -fPIC -pthread -std=c99"
    - export CXXFLAGS="-O3 -g -fPIC -pthread"
    - ./configure --prefix=$HOME/miniconda
    - make
    - make install

# Configure, build, and run tests

script:
    - python -c "import toast; toast.test()"
