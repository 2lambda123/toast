# We set the language to python, so that we can more easily specify our
# build matrix.  We simply apt install the compiled dependencies.
language: python

matrix:
  include:
    # GCC 4.8
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          packages:
            - build-essential
            - gcc
            - g++
            - gfortran
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
            - cmake
      env:
        - MATRIX_EVAL="export CC=$(which gcc) && export CXX=$(which g++) && export TOAST_USE_FSCACHE=1"
    # GCC 4.9
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-4.9
            - g++-4.9
            - gfortran-4.9
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
      env:
        - MATRIX_EVAL="export CC=$(which gcc-4.9) && export CXX=$(which g++-4.9) && export TOAST_USE_FSCACHE=0"
    # GCC 5
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-5
            - g++-5
            - gfortran-5
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
            - cmake
      env:
        - MATRIX_EVAL="export CC=$(which gcc-5) && export CXX=$(which g++-5) && export TOAST_USE_FSCACHE=1"
    # GCC 6
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-6
            - g++-6
            - gfortran-6
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
            - cmake
      env:
        - MATRIX_EVAL="export CC=$(which gcc-6) && export CXX=$(which g++-6) && export TOAST_USE_FSCACHE=0"
    # GCC 7
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - gcc-7
            - g++-7
            - gfortran-7
            - autoconf
            - automake
            - m4
            - libtool
            - libhdf5-dev
            - libmpich-dev
            - fftw3-dev
            - libatlas-base-dev
            - pkg-config
            - cmake
      env:
        - MATRIX_EVAL="export CC=$(which gcc-7) && export CXX=$(which g++-7) && export TOAST_USE_FSCACHE=1"

# The versions to test
python:
    - 3.6

# Set up MPI and mpi4py

before_install:
    # set the C and C++ compilers
    - eval "${MATRIX_EVAL}"
    # Information about C and C++ compilers
    - echo "CC = ${CC} $(${CC} -dumpversion)"
    - echo "CXX = ${CXX} $(${CXX} -dumpversion)"
    # set the MPICH underlying compilers
    - export MPICC=$(which mpicc)
    - export MPICXX=$(which mpicxx)
    - export MPICH_CC=${CC}
    - export MPICH_CXX=${CXX}
    # explicitly set the C and C++ compilers to MPICH compilers for autotools
    - export CC=$(which mpicc)
    - export CXX=$(which mpicxx)
    # information about the MPI compilers
    - echo "MPICC = ${MPICC}"
    - echo "MPICXX = ${MPICXX}"
    - echo "[MPI] CC = ${CC} $(${CC} -dumpversion)"
    - echo "[MPI] CXX = ${CXX} $(${CXX} -dumpversion)"
    - ${MPICC} -v
    - ${MPICXX} -v
    # miniconda install
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a
    - conda install -c conda-forge numpy scipy matplotlib healpy pyephem pip cython
    - pip install mpi4py timemory
    # Install libsharp C
    - git clone https://github.com/Libsharp/libsharp --branch master --single-branch --depth 1
    - cd libsharp
    - autoreconf
    - ./configure --enable-mpi --enable-pic
    - make
    - export LIBSHARP="$HOME/miniconda"
    - cp -r auto/* $LIBSHARP
    # Install libsharp Python
    - cd python
    - CC="mpicc -g" LDSHARED="mpicc -g -shared" python setup.py install
    - cd ../..
    # Install PySM
    - git clone https://github.com/zonca/PySM_public.git --branch megarun_2017 --single-branch --depth 1
    - cd PySM_public
    - python setup.py install
    - cd ..


install:
    # build
    - export CC=${MPICH_CC}
    - export CXX=${MPICH_CXX}
    - mkdir build-toast
    - cd build-toast
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${HOME}/miniconda
      -DBUILD_TESTING=ON -DCTEST_SITE=travis -DCTEST_LOCAL_CHECKOUT=ON
      -DCTEST_MODEL=Continuous -DGENERATE_EXAMPLES=OFF -DUSE_ARCH=OFF
      -DUSE_AATM=OFF -DUSE_SSE=OFF -DUSE_TBB=OFF -DUSE_OPENMP=ON
      -DUSE_FFTW=ON ${PWD}/..
    - ctest -DTRIGGER=None -S cdash/Build.cmake -VV


script:
    - export TOAST_TMPDIR=${HOME}/toast-tmp
    - mkdir -p ${TOAST_TMPDIR}
    - ctest -DTRIGGER=Test -S cdash/Test.cmake -L UnitTest -VV -A


# Slack integration
notifications:
    slack: c3cmb:7RR5xHHVvMAuw6g20ZuPhRD3
