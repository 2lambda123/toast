# We set the language to python, since we are focused on a recent python
# version and want to use the build matrix for testing different compiler
# versions.
language: python

# We use APT to get as many packages as possible.  Then we compile the rest
# of our dependencies.  If you change any packages in the build matrix, you
# should also update the travis dependency build script and rebuild the
# tarballs of dependencies.

matrix:
  include:
    # GCC 4.9 - this is the oldest version working well with libelemental.
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - autoconf
            - automake
            - m4
            - libtool
            - cmake
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libopenblas-dev
            - liblapack-dev
            - libfftw3-dev
            - libhdf5-dev
            - libcfitsio3-dev
            - gcc-4.9
            - g++-4.9
            - gfortran-4.9
      env:
        - MATRIX_EVAL="export CC=$(which gcc-4.9) && export CXX=$(which g++-4.9) && export FC=$(which gfortran-4.9) && export DEPGCC=-4.9"
    # GCC 5 - default version for ubuntu 16.04 LTS
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - autoconf
            - automake
            - m4
            - libtool
            - cmake
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libopenblas-dev
            - liblapack-dev
            - libfftw3-dev
            - libhdf5-dev
            - libcfitsio3-dev
            - gcc-5
            - g++-5
            - gfortran-5
      env:
        - MATRIX_EVAL="export CC=$(which gcc-5) && export CXX=$(which g++-5) && export FC=$(which gfortran-5) && export DEPGCC=-5"
    # GCC 7 - default version for ubuntu 18.04 LTS
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - autoconf
            - automake
            - m4
            - libtool
            - cmake
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libopenblas-dev
            - liblapack-dev
            - libfftw3-dev
            - libhdf5-dev
            - libcfitsio3-dev
            - gcc-7
            - g++-7
            - gfortran-7
      env:
        - MATRIX_EVAL="export CC=$(which gcc-7) && export CXX=$(which g++-7) && export FC=$(which gfortran-7) && export DEPGCC=-7"

# The python versions to test.
python:
    - 3.6

# Download pre-built dependencies and set up our environment.

before_install:
    # Set the C and C++ compilers
    - eval "${MATRIX_EVAL}"
    - echo "  CC = ${CC} $(${CC} -dumpversion)"
    - echo "  CXX = ${CXX} $(${CXX} -dumpversion)"
    - echo "  FC = ${FC} $(${FC} -dumpversion)"
    # Set python site version
    - export PYSITE=$(python --version 2>&1 | awk '{print $2}' | sed -e "s#\(.*\)\.\(.*\)\..*#\1.\2#")
    - echo "Python site version = ${PYSITE}"
    # Install python dependencies. NOTE:  if you change this list, also
    # change them in the dependency tarball script.
    - pip install -q numpy scipy matplotlib cython astropy ephem healpy
    - pip install -q https://github.com/bthorne93/PySM_public/archive/2.1.0.tar.gz
    # Install all compiled dependencies from a pre-cached location
    - export DEPSURL="http://portal.nersc.gov/project/cmb/toast_travis/travis_14.04_gcc${DEPGCC}_python${PYSITE}.tar.bz2"
    - echo "Fetching dependencies from ${DEPSURL}"
    - wget ${DEPSURL}
    - tar xjf travis_14.04_gcc${DEPGCC}_python${PYSITE}.tar.bz2 --directory ${HOME}
    # Load dependencies into our search paths
    - export PATH="${HOME}/software/bin:${PATH}"
    - export CPATH="${HOME}/software/include:${CPATH}"
    - export LIBRARY_PATH="${HOME}/software/lib:${LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${HOME}/software/lib:${LD_LIBRARY_PATH}"
    - export PYTHONPATH="${HOME}/software/lib/python${PYSITE}/site-packages:${PYTHONPATH}"
    # MPI compilers
    - export MPICC=$(which mpicc)
    - export MPICXX=$(which mpicxx)
    - export MPIFC=$(which mpif90)

# Install TOAST.

install:
    # Build and install
    - ./autogen.sh
    - export GCCSTD=""
    - if [ "x${DEPGCC}" = "x-4.9" ]; then export GCCSTD="-std=gnu++11"; fi
    - if [ "x${DEPGCC}" = "x-5" ]; then export GCCSTD="-std=gnu++11"; fi
    - CC="${MPICC}" CXX="${MPICXX}" CFLAGS="-O2 -g -fPIC -pthread -std=c99" CXXFLAGS="-O2 -g -fPIC -pthread ${GCCSTD}" ./configure --prefix=${HOME}/toast
    - make -j 2
    - make install
    # Load TOAST install prefix into our environment
    - export PATH="${HOME}/toast/bin:${PATH}"
    - export CPATH="${HOME}/toast/include:${CPATH}"
    - export LIBRARY_PATH="${HOME}/toast/lib:${LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${HOME}/toast/lib:${LD_LIBRARY_PATH}"
    - export PYTHONPATH="${HOME}/toast/lib/python${PYSITE}/site-packages:${PYTHONPATH}"

# Run tests

script:
    - ./travis/travis_run.sh

# Slack integration

notifications:
    slack: c3cmb:7RR5xHHVvMAuw6g20ZuPhRD3
