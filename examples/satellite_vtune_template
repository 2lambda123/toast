#!/bin/bash -l

#SBATCH --partition=@@queue@@
@@constraint@@
#SBATCH --account=mp107
#SBATCH --nodes=@@nodes@@
#SBATCH --time=@@time@@
#SBATCH --job-name=@@size@@-satellite
#SBATCH --output=out_@@size@@_satellite_vtune_@@machine@@_%j.log

echo Starting slurm script at $(date)

module load vtune

export AMPLXE_EXPERIMENTAL=python-hotspots

ulimit -s unlimited

pstr=@@machine@@
outdir="out_@@size@@_satellite_vtune_${pstr}"
mkdir -p "${outdir}"

# This script assumes that you are running at NERSC and have already
# loaded the toast module for the correct machine / configuration.

# This should be the same as the --nodes option above
nodes=@@nodes@@

# How many processes are we running per node?  Handle
# the case of a very small simulation.
if [ @@nobs@@ -lt 50 ]; then
    node_proc=1
else
    node_proc=@@nodeprocs@@
fi

# Generate the focalplane file if it does not already exist.

detpix=@@detpix@@

fpfile="${outdir}/fp_${detpix}.pkl"
if [ ! -e "${fpfile}" ]; then
    srun -n 1 -N 1 toast_fake_focalplane.py --minpix ${detpix} --out "${outdir}/fp"
fi

# The executable script

ex=$(which toast_satellite_sim.py)
echo "Using ${ex}"

# Scan strategy parameters from a file

parfile="@@topdir@@/params/satellite/sim_noise_hwp.par"

# Observations

nobs=@@nobs@@

groupnodes=@@groupnodes@@

# Data distribution parameters.  We are distributing by detector,
# so if our number of processes in a group is larger than the number
# of detectors this is bad.  In that case, set the group size to 
# one, so we have many more groups, each assigned

if [ ${node_proc} -gt ${detpix} ]; then
    groupsize=1
else
    groupsize=$(( node_proc * groupnodes ))
fi

# The commandline

com="${ex} @${parfile} \
--groupsize ${groupsize} \
--fp ${fpfile} \
--numobs ${nobs} \
--outdir ${outdir}/out \
"

#--- Hardware configuration ----

# Hyperthread CPUs per physical core
cpu_per_core=@@hyperthread@@

# Physical cores we are using
node_cores=@@nodecores@@

node_thread=$(( node_cores / node_proc ))
node_depth=$(( cpu_per_core * node_thread ))
procs=$(( nodes * node_proc ))

export OMP_NUM_THREADS=${node_thread}
export OMP_PLACES=threads
export OMP_PROC_BIND=spread

# Set TMPDIR to be on the ramdisk
export TMPDIR=/dev/shm

run="srun --cpu_bind=cores -n ${procs} -N ${nodes} -c ${node_depth} \
amplxe-cl \
-collect pyhotspots \
-knob sampling-interval=500 \
-run-pass-thru=--no-altstack \
-r ${outdir}/vtune \
-finalization-mode=deferred \
-trace-mpi -- \
"

echo Calling srun at $(date)

echo "${run} ${com}"
eval ${run} ${com} > "${outdir}/log" 2>&1

echo "Finalizing vtune result"
amplxe-cl -finalize -r ${outdir}/vtune

echo End slurm script at $(date)

