Pre-building TOAST Dependencies for Travis
==================================================

We want to be able to run travis tests quickly, and we want to test TOAST, not
just spend our time compiling dependencies.  Travis supports caching pieces of
its build, but there is a hard limit of 50 minutes for all open source (i.e.
unpaid) projects.  Our dependencies (mainly MPI and Elemental) take longer than
that to build.  So we cannot even build our dependencies once with travis in
order to cache them for the future.

Instead, we use scripts in this directory to build our dependencies inside the
same (or very similar) docker container used by the travis service.  Whenever
we need to test against a new version of one of our compiled dependencies, we
need to re-build the tarballs of these dependencies.  This README explains how
to do this.


Requirements
-----------------

- A working docker installation.

- A checkout of the TOAST source code that contains the updated travis
  scripts in this directory.


Procedure
-----------------

1.  Go to the TOAST travis webpage:

https://travis-ci.org/hpc4cmb/toast

And select a recent build.  Click on the link to bring up the log.  Click on
the "worker" section near the top.  Find the "instance" name which is the name
of the docker image that was used for the run.  It will look something like:

"travisci/ci-garnet:packer-1512502276-986baf0"

2.  Look in the toast/.travis.yml file and see which gcc versions are being
tested in the build matrix.  The default version has no suffix, and then there
are several other versions.  For each suffix (e.g. "-7", "-5", and ""), we will
be launching a docker container, building a tarball, and uploading it.

3.  cd into the directory containing this README_travis file.  Run these steps
for each gcc suffix in the build matrix:

$> ./travis_docker.sh travisci/ci-garnet:packer-1512502276-986baf0
(substitute the actual instance name from step #1).

Now you will be inside the container, and the directory containing our scripts
will be mounted in ~/scripts.  Build the tarball for the gcc suffix:

$> ./scripts/travis_ubuntu_14.04.sh "-7"

Upload the tarball to NERSC:

$> ./scripts/travis_upload.sh kisner
(substitute your NERSC user ID above)

Leave the docker container:

$> exit

4.  Now repeat step #3 for each gcc suffix.  On a workstation with 4 cores and
sufficient memory, you can run all builds simultaneously.
